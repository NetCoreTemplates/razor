@page
@{
    ViewData["Title"] = "Sign In";

    if (await Html.IsAuthenticatedAsync())
    {
        await Html.RedirectToAsync(Html.GetReturnUrl());
        return;
    }
}

<div class="container px-5 mb-32">
    <div class="mx-auto max-w-lg">
        <h2 class="py-8 text-center text-3xl font-bold text-gray-900 dark:text-gray-100 sm:text-4xl">
            @ViewData["Title"]
        </h2>
        <div id="signin"></div>
        <div class="hidden mt-5 flex justify-center" classes="remove hidden:load">
            @Html.SrcRazorPage("SignIn.cshtml")
        </div>
    </div>
</div>

<template id="signin-template">
    <div>
        <form v-on:submit.prevent="submit">
            <div class="shadow overflow-hidden sm:rounded-md">
                <error-summary except="userName,password,rememberMe"></error-summary>
                <div class="px-4 py-5 bg-white space-y-6 sm:p-6">
                    <div class="flex flex-col gap-y-4">
                        <text-input id="userName" placeholder="Email" help="Email you signed up with" v-model="userName"></text-input>
                        <text-input id="password" type="password" help="6 characters or more" v-model="password"></text-input>
                        <checkbox-input id="rememberMe" v-model="rememberMe"/>
                    </div>
                </div>
                <div class="pt-5 px-4 py-3 bg-gray-50 text-right sm:px-6">
                    <div class="flex justify-end">
                        <form-loading class="flex-1"></form-loading>
                        <secondary-button href="/signup">Register New User</secondary-button>
                        <primary-button class="ml-3">Login</primary-button>
                    </div>
                </div>
            </div>
        </form>

        <div class="flex mt-8">
            <h3 class="hidden xs:block mr-4 leading-8 text-gray-500">Quick Links</h3>
            <span class="relative z-0 inline-flex shadow-sm rounded-md">
                <button type="button" v-on:click="setUser('admin@email.com')"
                        class="relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500">
                    admin@email.com
                </button>
                <button type="button" v-on:click="setUser('new@user.com')"
                        class="-ml-px relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500">
                    new@user.com
                </button>
            </span>
        </div>
    </div>
</template>

<script type="module">
import { ref } from "vue"
import { mount } from "/mjs/app.mjs"

import { useClient } from "@@servicestack/vue"
import { Authenticate } from "/mjs/dtos.mjs"
import { AppData } from "/mjs/app.mjs"

const SignIn = {
    template:document.querySelector('#signin-template'),
    props:['redirect'],
    setup(props) {
        const { api, unRefs } = useClient()
        const userName = ref('')
        const password = ref('')
        const rememberMe = ref(true)

        function setUser(email) {
            userName.value = email
            password.value = "p@55wOrd"
        }
        async function submit(e) {
            const r = await api(new Authenticate(unRefs({ provider: 'credentials', userName, password, rememberMe })))
            if (r.succeeded) {
                AppData.Auth = r.response
                location.href = props.redirect || '/'
            }
        }
        return { userName, password, rememberMe, setUser, submit }
    }
}

mount('#signin', SignIn, { redirect:`@Html.Query("redirect")` })
</script>